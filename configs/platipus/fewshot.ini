[EXPERIMENT]
# change to platipus-zeroshot
name=platipus-fewshot
seed=42

###### TRAINING DATASET CONFIGS ######

# configs for the meta dataset that stores datasets 
[META_DATASET]
root_path=data/oscar
languages=data/cc100_languages.txt

task_sampling_method=proportional
task_sampling_prop_rate=0.3

# configs for each individual language dataset
[LANGUAGE_TASK_DATASET]
n=5
k=20
q=20
sample_size=10_000 
mask_sampling_method=proportional
mask_sampling_prop_rate=0.3

###### MODEL ARCHITERTURE AND LEARNING ######

[BASE_MODEL]
name=xlm_r
# layers to be meta-learned 
trainable_layers=[11]

[LEARNER]
method=platipus

# To load in a checkpoint need to specify the file name and the desired saved run
; checkpoint_file=final.pt
; checkpoint_run=problyglot/platipus-zeroshot/9au0a3gy

optimizer_type=adam
meta_lr=1e-4

kl_weight=1e-9

# number of gradient updates in the inner loop
num_inner_steps=10
use_first_order=True

# how to represent a 'task embedding'
# val_grad (the gradient on the validation set) is the method used 
# in the original platipus paper 
task_embedding_method=val_grad 

# method for intializing the weights of the task classifier 
task_cls_init_method=protomaml

[PROBLYGLOT]

# can override the default device by specifying: 
# device=("cuda" or "cpu")

# number of tasks to sample before running global update step
num_tasks_per_iteration=10

# number of task batches before running evaluation 
# setting to 0 means we never evaluate
eval_every_n_iteration=50

# number of max task batches to train on
max_task_batch_steps=1000

# whether to save the final model (after training)
save_final_model=True

###### EVALUATION ######

[EVALUATION]
# for each evaluation task we need a corresponding dataset
# tasks should be comma-separated
tasks=xnli

# whether to run eval on dev or test
partition=dev
batch_size=64

# whether to write checkpoints
save_checkpoints=False

[XNLI_DATASET]
root_path=data/xtreme/download/xnli
use_few_shot_adaptation=True
adapt_on_eval=False