[EXPERIMENT]
name=demo
seed=42

###### TRAINING DATASET CONFIGS ######

# configs for the meta dataset that stores datasets 
[META_DATASET]
root_path=data/oscar
languages=data/cc100_languages.txt

task_sampling_method=proportional
task_sampling_prop_rate=0.3

# configs for each individual language dataset
[LANGUAGE_TASK_DATASET]
# CHANGE ME 
n=1
k=1
q=1
# CHANGE ME 
sample_size=1000 
mask_sampling_method=proportional
mask_sampling_prop_rate=0.3

###### MODEL ARCHITERTURE AND LEARNING ######

[BASE_MODEL]
name=xlm_r
# layers to be meta-learned 
trainable_layers=[0,1,2,3,4,5,6,7,8,9,10,11]

[LEARNER]
method=platipus

# To load in a checkpoint need to specify the file name and the desired saved run
checkpoint_file=checkpoint-1.pt
checkpoint_run=problyglot/demo/le9kjqpa

optimizer_type=adam
meta_lr=0.01

# number of gradient updates in the inner loop
num_inner_steps=5
use_first_order=True

# how to represent a 'task embedding'
# val_grad (the gradient on the validation set) is the method used 
# in the original platipus paper 
task_embedding_method=val_grad 

[PROBLYGLOT]

# can override the default device by specifying: 
# device=("cuda" or "cpu")

# number of tasks to sample before running global update step
num_tasks_per_iteration=5

# number of task batches before running evaluation 
# setting to 0 means we never evaluate
eval_every_n_iteration=1

# number of max task batches to train on
max_task_batch_steps = 2

###### EVALUATION ######

[EVALUATION]
# for each evaluation task we need a corresponding dataset
# tasks should be comma-separated
tasks=xnli

# whether to run eval on dev or test
partition=dev
batch_size=128

# whether to write checkpoints
save_checkpoints=True

[XNLI_DATASET]
root_path=data/xtreme/download/xnli
use_few_shot_adaptation=True
adapt_on_eval=False